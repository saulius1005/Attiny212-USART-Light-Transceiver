
Attiny212-USART-Light-Transceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f80  00803f80  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  00008430  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000003  00803f80  00803f80  000005c8  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000638  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000293a  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d41  00000000  00000000  00003092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c07  00000000  00000000  00004dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000268  00000000  00000000  000059dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000129b  00000000  00000000  00005c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000082d  00000000  00000000  00006edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  0000770c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e8       	ldi	r26, 0x80	; 128
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 38       	cpi	r26, 0x83	; 131
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	9b d0       	rcall	.+310    	; 0x188 <main>
  52:	ec c1       	rjmp	.+984    	; 0x42c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (20 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKSEL_OSC20M_gc);
  56:	63 e0       	ldi	r22, 0x03	; 3
  58:	80 e6       	ldi	r24, 0x60	; 96
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	e1 d1       	rcall	.+962    	; 0x420 <ccp_write_io>

	/* Disable the main clock prescaler for full-speed operation. */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	81 e6       	ldi	r24, 0x61	; 97
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	dd d1       	rcall	.+954    	; 0x420 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
  66:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <crc8_table+0x7f7c33>
  6a:	80 fd       	sbrc	r24, 0
  6c:	fc cf       	rjmp	.-8      	; 0x66 <CLOCK_XOSCHF_clock_init+0x10>
	{};
	/* Configuration complete;*/
}
  6e:	08 95       	ret

00000070 <crc8_cdma2000>:
		crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
	}
	return crc;
}*/

uint8_t crc8_cdma2000(uint64_t data) {
  70:	2f 92       	push	r2
  72:	3f 92       	push	r3
  74:	4f 92       	push	r4
  76:	5f 92       	push	r5
  78:	6f 92       	push	r6
  7a:	7f 92       	push	r7
  7c:	8f 92       	push	r8
  7e:	9f 92       	push	r9
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	32 2e       	mov	r3, r18
  96:	43 2e       	mov	r4, r19
  98:	54 2e       	mov	r5, r20
  9a:	65 2e       	mov	r6, r21
  9c:	76 2e       	mov	r7, r22
  9e:	d7 2f       	mov	r29, r23
  a0:	c8 2f       	mov	r28, r24
  a2:	29 2e       	mov	r2, r25
	uint8_t crc = 0xFF;
	size_t length = sizeof(data); // Naudojame fiksuotà 8 baitø dydá
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return crc;
}*/

uint8_t crc8_cdma2000(uint64_t data) {
	uint8_t crc = 0xFF;
  a8:	af ef       	ldi	r26, 0xFF	; 255
	size_t length = sizeof(data); // Naudojame fiksuotà 8 baitø dydá

	while (length--) {
  aa:	18 c0       	rjmp	.+48     	; 0xdc <__DATA_REGION_LENGTH__+0x5c>
		crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
  ac:	8f 01       	movw	r16, r30
  ae:	00 0f       	add	r16, r16
  b0:	11 1f       	adc	r17, r17
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	00 0f       	add	r16, r16
  b8:	11 1f       	adc	r17, r17
  ba:	23 2d       	mov	r18, r3
  bc:	34 2d       	mov	r19, r4
  be:	45 2d       	mov	r20, r5
  c0:	56 2d       	mov	r21, r6
  c2:	67 2d       	mov	r22, r7
  c4:	7d 2f       	mov	r23, r29
  c6:	8c 2f       	mov	r24, r28
  c8:	92 2d       	mov	r25, r2
  ca:	64 d1       	rcall	.+712    	; 0x394 <__lshrdi3>
  cc:	8a 2e       	mov	r8, r26
  ce:	82 26       	eor	r8, r18
  d0:	91 2c       	mov	r9, r1
  d2:	d4 01       	movw	r26, r8
  d4:	a0 5d       	subi	r26, 0xD0	; 208
  d6:	bb 47       	sbci	r27, 0x7B	; 123
  d8:	ac 91       	ld	r26, X

uint8_t crc8_cdma2000(uint64_t data) {
	uint8_t crc = 0xFF;
	size_t length = sizeof(data); // Naudojame fiksuotà 8 baitø dydá

	while (length--) {
  da:	cf 01       	movw	r24, r30
  dc:	fc 01       	movw	r30, r24
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	89 2b       	or	r24, r25
  e2:	21 f7       	brne	.-56     	; 0xac <__DATA_REGION_LENGTH__+0x2c>
		crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
	}
	return crc;
}
  e4:	8a 2f       	mov	r24, r26
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	ff 90       	pop	r15
  f0:	ef 90       	pop	r14
  f2:	df 90       	pop	r13
  f4:	cf 90       	pop	r12
  f6:	bf 90       	pop	r11
  f8:	af 90       	pop	r10
  fa:	9f 90       	pop	r9
  fc:	8f 90       	pop	r8
  fe:	7f 90       	pop	r7
 100:	6f 90       	pop	r6
 102:	5f 90       	pop	r5
 104:	4f 90       	pop	r4
 106:	3f 90       	pop	r3
 108:	2f 90       	pop	r2
 10a:	08 95       	ret

0000010c <verify_crc8_cdma2000>:

uint64_t verify_crc8_cdma2000(uint64_t data_with_crc) {
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	b2 2e       	mov	r11, r18
	uint8_t expected_crc = data_with_crc & 0xFF;
	uint64_t data = data_with_crc >> 8;
 120:	08 e0       	ldi	r16, 0x08	; 8
 122:	38 d1       	rcall	.+624    	; 0x394 <__lshrdi3>
 124:	c2 2e       	mov	r12, r18
 126:	d3 2e       	mov	r13, r19
 128:	e4 2e       	mov	r14, r20
 12a:	f5 2e       	mov	r15, r21
 12c:	06 2f       	mov	r16, r22
 12e:	17 2f       	mov	r17, r23
 130:	d8 2f       	mov	r29, r24
 132:	c9 2f       	mov	r28, r25
	if (crc8_cdma2000(data) == expected_crc) {
 134:	9d df       	rcall	.-198    	; 0x70 <crc8_cdma2000>
 136:	b8 16       	cp	r11, r24
 138:	49 f0       	breq	.+18     	; 0x14c <verify_crc8_cdma2000+0x40>
		return data;
	}
	return 0;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 c0       	rjmp	.+16     	; 0x15c <verify_crc8_cdma2000+0x50>

uint64_t verify_crc8_cdma2000(uint64_t data_with_crc) {
	uint8_t expected_crc = data_with_crc & 0xFF;
	uint64_t data = data_with_crc >> 8;
	if (crc8_cdma2000(data) == expected_crc) {
		return data;
 14c:	2c 2d       	mov	r18, r12
 14e:	3d 2d       	mov	r19, r13
 150:	4e 2d       	mov	r20, r14
 152:	5f 2d       	mov	r21, r15
 154:	60 2f       	mov	r22, r16
 156:	71 2f       	mov	r23, r17
 158:	8d 2f       	mov	r24, r29
 15a:	9c 2f       	mov	r25, r28
	}
	return 0;
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	cf 90       	pop	r12
 16c:	bf 90       	pop	r11
 16e:	08 95       	ret

00000170 <GPIO_init>:
 */ 
 #include "Settings.h"

void GPIO_init(){

    PORTA.DIRSET = PIN6_bm; // Set PA6 as UART Transceiver TX output
 170:	e0 e0       	ldi	r30, 0x00	; 0
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	81 83       	std	Z+1, r24	; 0x01
    PORTA.PIN6CTRL = PORT_PULLUPEN_bm; //
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	86 8b       	std	Z+22, r24	; 0x16
    
    PORTA.DIRCLR = PIN1_bm | PIN2_bm | PIN7_bm; // Set PA1 as Xmax input, Set PA2 as Xmin input, Set PA7 as Light UART RX input
 17c:	96 e8       	ldi	r25, 0x86	; 134
 17e:	92 83       	std	Z+2, r25	; 0x02
    PORTA.PIN1CTRL = PORT_PULLUPEN_bm; //
 180:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm; //
 182:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm; //
 184:	87 8b       	std	Z+23, r24	; 0x17
 186:	08 95       	ret

00000188 <main>:
#include "Settings.h"


int main(void)
{
	CLOCK_XOSCHF_clock_init();
 188:	66 df       	rcall	.-308    	; 0x56 <CLOCK_XOSCHF_clock_init>
	//CLOCK_INHF_clock_init();
	GPIO_init();
 18a:	f2 df       	rcall	.-28     	; 0x170 <GPIO_init>
	USART0_init();
 18c:	a2 d0       	rcall	.+324    	; 0x2d2 <USART0_init>

    while (1) 
    {
		Transceiver();
 18e:	59 d0       	rcall	.+178    	; 0x242 <Transceiver>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	2f e7       	ldi	r18, 0x7F	; 127
 192:	8a e1       	ldi	r24, 0x1A	; 26
 194:	96 e0       	ldi	r25, 0x06	; 6
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x18>
 1a0:	00 00       	nop
 1a2:	f5 cf       	rjmp	.-22     	; 0x18e <main+0x6>

000001a4 <hexStringToUint64>:
	 }
	 if (ptr == out) { // Jei reikðmë buvo 0
		 *ptr++ = '0';
	 }
	 *ptr = '\0'; // Pridedame string'o pabaigos simbolá
 }
 1a4:	0f 93       	push	r16
 1a6:	dc 01       	movw	r26, r24
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <hexStringToUint64+0x40>
 1ba:	f0 ed       	ldi	r31, 0xD0	; 208
 1bc:	fe 0f       	add	r31, r30
 1be:	fa 30       	cpi	r31, 0x0A	; 10
 1c0:	68 f0       	brcs	.+26     	; 0x1dc <hexStringToUint64+0x38>
 1c2:	ff eb       	ldi	r31, 0xBF	; 191
 1c4:	fe 0f       	add	r31, r30
 1c6:	f6 30       	cpi	r31, 0x06	; 6
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <hexStringToUint64+0x2c>
 1ca:	f9 ec       	ldi	r31, 0xC9	; 201
 1cc:	fe 0f       	add	r31, r30
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <hexStringToUint64+0x38>
 1d0:	ff e9       	ldi	r31, 0x9F	; 159
 1d2:	fe 0f       	add	r31, r30
 1d4:	f6 30       	cpi	r31, 0x06	; 6
 1d6:	48 f4       	brcc	.+18     	; 0x1ea <hexStringToUint64+0x46>
 1d8:	f9 ea       	ldi	r31, 0xA9	; 169
 1da:	fe 0f       	add	r31, r30
 1dc:	04 e0       	ldi	r16, 0x04	; 4
 1de:	bf d0       	rcall	.+382    	; 0x35e <__ashldi3>
 1e0:	2f 2b       	or	r18, r31
 1e2:	11 96       	adiw	r26, 0x01	; 1
 1e4:	ec 91       	ld	r30, X
 1e6:	e1 11       	cpse	r30, r1
 1e8:	e8 cf       	rjmp	.-48     	; 0x1ba <hexStringToUint64+0x16>
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <executeCommand>:

 void executeCommand(char *command) {
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <executeCommand+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <executeCommand+0x8>
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	
	uint64_t a = verify_crc8_cdma2000(hexStringToUint64(command));
 1fa:	d4 df       	rcall	.-88     	; 0x1a4 <hexStringToUint64>
 1fc:	87 df       	rcall	.-242    	; 0x10c <verify_crc8_cdma2000>
	char buffer[20]; // 16 simboliø + null terminatorius
	uint8_t x = 0;

	if(!(PORTA.IN & PIN1_bm))
 1fe:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <crc8_table+0x7f7fd8>
 202:	81 fd       	sbrc	r24, 1
		x=4;
	else if(!(PORTA.IN & PIN2_bm))
 204:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <crc8_table+0x7f7fd8>
	x=8;
	a = a+16;	 
	//uint64ToHex(a, buffer);
	//USART0_sendString(buffer);
	char test[4];
	utoa(crc8_cdma2000(0x23278C9FA1F6900),test,16);
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	39 e6       	ldi	r19, 0x69	; 105
 20c:	4f e1       	ldi	r20, 0x1F	; 31
 20e:	5a ef       	ldi	r21, 0xFA	; 250
 210:	69 ec       	ldi	r22, 0xC9	; 201
 212:	78 e7       	ldi	r23, 0x78	; 120
 214:	82 e3       	ldi	r24, 0x32	; 50
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	2b df       	rcall	.-426    	; 0x70 <crc8_cdma2000>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 21a:	40 e1       	ldi	r20, 0x10	; 16
 21c:	be 01       	movw	r22, r28
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	d3 d0       	rcall	.+422    	; 0x3cc <__utoa_ncheck>

	//strcat(buffer, test);
	USART0_sendChar('<');
 226:	8c e3       	ldi	r24, 0x3C	; 60
 228:	5f d0       	rcall	.+190    	; 0x2e8 <USART0_sendChar>
	USART0_sendString(test); //send crc
 22a:	ce 01       	movw	r24, r28
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	63 d0       	rcall	.+198    	; 0x2f6 <USART0_sendString>
	USART0_sendString(">\r\n");
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	95 e8       	ldi	r25, 0x85	; 133
 234:	60 d0       	rcall	.+192    	; 0x2f6 <USART0_sendString>
	temp[0] = !(PORTA.IN & PIN2_bm) + '0'; //PA2 bit value to string
	strcat(command, temp);
	strcat(command, ">\r\n");

	USART0_sendString(command);*/
 }
 236:	24 96       	adiw	r28, 0x04	; 4
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <Transceiver>:

 void Transceiver() {
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	69 97       	sbiw	r28, 0x19	; 25
 250:	cd bf       	out	0x3d, r28	; 61
 252:	de bf       	out	0x3e, r29	; 62
	 uint8_t index = 0;
	 char command[25] = {0};
 254:	fe 01       	movw	r30, r28
 256:	31 96       	adiw	r30, 0x01	; 1
 258:	89 e1       	ldi	r24, 0x19	; 25
 25a:	df 01       	movw	r26, r30
 25c:	1d 92       	st	X+, r1
 25e:	8a 95       	dec	r24
 260:	e9 f7       	brne	.-6      	; 0x25c <Transceiver+0x1a>
	 uint8_t start = 0;
 262:	10 e0       	ldi	r17, 0x00	; 0

	USART0_sendString(command);*/
 }

 void Transceiver() {
	 uint8_t index = 0;
 264:	00 e0       	ldi	r16, 0x00	; 0
	 char command[25] = {0};
	 uint8_t start = 0;

    while (1) {
	    char c = USART0_readChar();
 266:	64 d0       	rcall	.+200    	; 0x330 <USART0_readChar>

	    if (!Status.warning) {
 268:	90 91 82 3f 	lds	r25, 0x3F82	; 0x803f82 <__DATA_REGION_ORIGIN__+0x2>
 26c:	91 11       	cpse	r25, r1
 26e:	1c c0       	rjmp	.+56     	; 0x2a8 <Transceiver+0x66>
		    if (start == 1) {
 270:	11 30       	cpi	r17, 0x01	; 1
 272:	71 f4       	brne	.+28     	; 0x290 <Transceiver+0x4e>
			    if (c == '>') {
 274:	8e 33       	cpi	r24, 0x3E	; 62
 276:	21 f4       	brne	.+8      	; 0x280 <Transceiver+0x3e>
				    start = 0;
				    executeCommand(command);
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	b8 df       	rcall	.-144    	; 0x1ee <executeCommand>
				    index = 0;
				    break;
 27e:	21 c0       	rjmp	.+66     	; 0x2c2 <Transceiver+0x80>
				    } else {
				    command[index++] = c;
 280:	e1 e0       	ldi	r30, 0x01	; 1
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	e0 0f       	add	r30, r16
 28a:	f1 1d       	adc	r31, r1
 28c:	80 83       	st	Z, r24
 28e:	0f 5f       	subi	r16, 0xFF	; 255
			    }
		    }
		    if (c == '<') {
 290:	8c 33       	cpi	r24, 0x3C	; 60
 292:	09 f4       	brne	.+2      	; 0x296 <Transceiver+0x54>
			    start = 1;
 294:	11 e0       	ldi	r17, 0x01	; 1
		    }
		    if (Status.error == 1) {
 296:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	21 f7       	brne	.-56     	; 0x266 <Transceiver+0x24>
			    Status.errorCounter = 0;
 29e:	e0 e8       	ldi	r30, 0x80	; 128
 2a0:	ff e3       	ldi	r31, 0x3F	; 63
 2a2:	11 82       	std	Z+1, r1	; 0x01
			    Status.error = 0;
 2a4:	10 82       	st	Z, r1
 2a6:	df cf       	rjmp	.-66     	; 0x266 <Transceiver+0x24>
		    }
		    } else {
		    Status.warning = 0;
 2a8:	e0 e8       	ldi	r30, 0x80	; 128
 2aa:	ff e3       	ldi	r31, 0x3F	; 63
 2ac:	12 82       	std	Z+2, r1	; 0x02
		    if (Status.errorCounter < CountForError) {
 2ae:	81 81       	ldd	r24, Z+1	; 0x01
 2b0:	8a 30       	cpi	r24, 0x0A	; 10
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <Transceiver+0x7a>
			    Status.errorCounter += 1;
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 81 3f 	sts	0x3F81, r24	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <Transceiver+0x80>
			    } else {
			    Status.error = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
		    }
		    break;
	    }
    }
 2c2:	69 96       	adiw	r28, 0x19	; 25
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <USART0_init>:
 * - Double-speed operation for higher communication speed.
 * - Transmitter enabled, reception mode set for double-speed.
 * - Asynchronous communication mode with 8 data bits, no parity, and 1 stop bit.
 */
void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.25 Mbps.
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f8 e0       	ldi	r31, 0x08	; 8
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	80 87       	std	Z+8, r24	; 0x08
 2dc:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_TXEN_bm | USART_RXEN_bm | USART_RXMODE_CLK2X_gc; ///< Enable transmitter, double-speed mode.
 2de:	82 ec       	ldi	r24, 0xC2	; 194
 2e0:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | ///< Configure for asynchronous mode.
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	87 83       	std	Z+7, r24	; 0x07
 2e6:	08 95       	ret

000002e8 <USART0_sendChar>:
 * This function waits for the USART0 data register to be empty and then transmits the specified character.
 * 
 * @param c The character to be transmitted.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty.
 2e8:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <crc8_table+0x7f83d4>
 2ec:	95 ff       	sbrs	r25, 5
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <USART0_sendChar>
    USART0.TXDATAL = c; ///< Transmit the character.
 2f0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <crc8_table+0x7f83d2>
 2f4:	08 95       	ret

000002f6 <USART0_sendString>:
 * 
 * This function sends a string of characters one by one using the `USART0_sendChar` function.
 * 
 * @param str The string to be transmitted.
 */
void USART0_sendString(char *str) {
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	8c 01       	movw	r16, r24
    for (size_t i = 0; i < strlen(str); i++) {
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	06 c0       	rjmp	.+12     	; 0x312 <USART0_sendString+0x1c>
        USART0_sendChar(str[i]); ///< Send each character of the string.
 306:	f8 01       	movw	r30, r16
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	80 81       	ld	r24, Z
 30e:	ec df       	rcall	.-40     	; 0x2e8 <USART0_sendChar>
 * This function sends a string of characters one by one using the `USART0_sendChar` function.
 * 
 * @param str The string to be transmitted.
 */
void USART0_sendString(char *str) {
    for (size_t i = 0; i < strlen(str); i++) {
 310:	21 96       	adiw	r28, 0x01	; 1
 312:	f8 01       	movw	r30, r16
 314:	01 90       	ld	r0, Z+
 316:	00 20       	and	r0, r0
 318:	e9 f7       	brne	.-6      	; 0x314 <USART0_sendString+0x1e>
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	e0 1b       	sub	r30, r16
 31e:	f1 0b       	sbc	r31, r17
 320:	ce 17       	cp	r28, r30
 322:	df 07       	cpc	r29, r31
 324:	80 f3       	brcs	.-32     	; 0x306 <USART0_sendString+0x10>
        USART0_sendChar(str[i]); ///< Send each character of the string.
    }
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <USART0_readChar>:

char USART0_readChar() {
	USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <crc8_table+0x7f83d4>
	uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
 336:	80 e2       	ldi	r24, 0x20	; 32
 338:	91 ea       	ldi	r25, 0xA1	; 161
 33a:	a7 e0       	ldi	r26, 0x07	; 7
 33c:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 33e:	08 c0       	rjmp	.+16     	; 0x350 <USART0_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	a1 09       	sbc	r26, r1
 344:	b1 09       	sbc	r27, r1
 346:	21 f4       	brne	.+8      	; 0x350 <USART0_readChar+0x20>
			Status.warning = 3; // Set warning if timeout occurs
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	80 93 82 3f 	sts	0x3F82, r24	; 0x803f82 <__DATA_REGION_ORIGIN__+0x2>
			break;
 34e:	04 c0       	rjmp	.+8      	; 0x358 <USART0_readChar+0x28>
}

char USART0_readChar() {
	USART0.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART0.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
 350:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <crc8_table+0x7f83d4>
 354:	22 23       	and	r18, r18
 356:	a4 f7       	brge	.-24     	; 0x340 <USART0_readChar+0x10>
		if (--timeout_counter == 0) { // Timeout condition
			Status.warning = 3; // Set warning if timeout occurs
			break;
		}
	}
	return USART0.RXDATAL; // Return received character
 358:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <crc8_table+0x7f83d0>
}
 35c:	08 95       	ret

0000035e <__ashldi3>:
 35e:	0f 93       	push	r16
 360:	08 30       	cpi	r16, 0x08	; 8
 362:	90 f0       	brcs	.+36     	; 0x388 <__ashldi3+0x2a>
 364:	98 2f       	mov	r25, r24
 366:	87 2f       	mov	r24, r23
 368:	76 2f       	mov	r23, r22
 36a:	65 2f       	mov	r22, r21
 36c:	54 2f       	mov	r21, r20
 36e:	43 2f       	mov	r20, r19
 370:	32 2f       	mov	r19, r18
 372:	22 27       	eor	r18, r18
 374:	08 50       	subi	r16, 0x08	; 8
 376:	f4 cf       	rjmp	.-24     	; 0x360 <__ashldi3+0x2>
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	44 1f       	adc	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	66 1f       	adc	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 95       	dec	r16
 38a:	b2 f7       	brpl	.-20     	; 0x378 <__ashldi3+0x1a>
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <__ashrdi3>:
 390:	97 fb       	bst	r25, 7
 392:	10 f8       	bld	r1, 0

00000394 <__lshrdi3>:
 394:	16 94       	lsr	r1
 396:	00 08       	sbc	r0, r0
 398:	0f 93       	push	r16
 39a:	08 30       	cpi	r16, 0x08	; 8
 39c:	98 f0       	brcs	.+38     	; 0x3c4 <__lshrdi3+0x30>
 39e:	08 50       	subi	r16, 0x08	; 8
 3a0:	23 2f       	mov	r18, r19
 3a2:	34 2f       	mov	r19, r20
 3a4:	45 2f       	mov	r20, r21
 3a6:	56 2f       	mov	r21, r22
 3a8:	67 2f       	mov	r22, r23
 3aa:	78 2f       	mov	r23, r24
 3ac:	89 2f       	mov	r24, r25
 3ae:	90 2d       	mov	r25, r0
 3b0:	f4 cf       	rjmp	.-24     	; 0x39a <__lshrdi3+0x6>
 3b2:	05 94       	asr	r0
 3b4:	97 95       	ror	r25
 3b6:	87 95       	ror	r24
 3b8:	77 95       	ror	r23
 3ba:	67 95       	ror	r22
 3bc:	57 95       	ror	r21
 3be:	47 95       	ror	r20
 3c0:	37 95       	ror	r19
 3c2:	27 95       	ror	r18
 3c4:	0a 95       	dec	r16
 3c6:	aa f7       	brpl	.-22     	; 0x3b2 <__lshrdi3+0x1e>
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <__utoa_ncheck>:
 3cc:	bb 27       	eor	r27, r27

000003ce <__utoa_common>:
 3ce:	fb 01       	movw	r30, r22
 3d0:	55 27       	eor	r21, r21
 3d2:	aa 27       	eor	r26, r26
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	aa 1f       	adc	r26, r26
 3da:	a4 17       	cp	r26, r20
 3dc:	10 f0       	brcs	.+4      	; 0x3e2 <__utoa_common+0x14>
 3de:	a4 1b       	sub	r26, r20
 3e0:	83 95       	inc	r24
 3e2:	50 51       	subi	r21, 0x10	; 16
 3e4:	b9 f7       	brne	.-18     	; 0x3d4 <__utoa_common+0x6>
 3e6:	a0 5d       	subi	r26, 0xD0	; 208
 3e8:	aa 33       	cpi	r26, 0x3A	; 58
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <__utoa_common+0x20>
 3ec:	a9 5d       	subi	r26, 0xD9	; 217
 3ee:	a1 93       	st	Z+, r26
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	79 f7       	brne	.-34     	; 0x3d2 <__utoa_common+0x4>
 3f4:	b1 11       	cpse	r27, r1
 3f6:	b1 93       	st	Z+, r27
 3f8:	11 92       	st	Z+, r1
 3fa:	cb 01       	movw	r24, r22
 3fc:	0c 94 00 02 	jmp	0x400	; 0x400 <strrev>

00000400 <strrev>:
 400:	dc 01       	movw	r26, r24
 402:	fc 01       	movw	r30, r24
 404:	67 2f       	mov	r22, r23
 406:	71 91       	ld	r23, Z+
 408:	77 23       	and	r23, r23
 40a:	e1 f7       	brne	.-8      	; 0x404 <strrev+0x4>
 40c:	32 97       	sbiw	r30, 0x02	; 2
 40e:	04 c0       	rjmp	.+8      	; 0x418 <strrev+0x18>
 410:	7c 91       	ld	r23, X
 412:	6d 93       	st	X+, r22
 414:	70 83       	st	Z, r23
 416:	62 91       	ld	r22, -Z
 418:	ae 17       	cp	r26, r30
 41a:	bf 07       	cpc	r27, r31
 41c:	c8 f3       	brcs	.-14     	; 0x410 <strrev+0x10>
 41e:	08 95       	ret

00000420 <ccp_write_io>:
 420:	dc 01       	movw	r26, r24
 422:	28 ed       	ldi	r18, 0xD8	; 216
 424:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <crc8_table+0x7f7c04>
 428:	6c 93       	st	X, r22
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
